diff --git a/node_modules/libp2p/dist/src/connection-manager/index.d.ts b/node_modules/libp2p/dist/src/connection-manager/index.d.ts
index 11bda5d..2490f0b 100644
--- a/node_modules/libp2p/dist/src/connection-manager/index.d.ts
+++ b/node_modules/libp2p/dist/src/connection-manager/index.d.ts
@@ -11,8 +11,9 @@ import type { Metrics } from '@libp2p/interface/metrics';
 import type { PeerId } from '@libp2p/interface/peer-id';
 import type { PeerStore } from '@libp2p/interface/peer-store';
 import type { Startable } from '@libp2p/interface/startable';
-import type { ConnectionManager } from '@libp2p/interface-internal/connection-manager';
+import type { ConnectionManager, OpenConnectionOptions } from '@libp2p/interface-internal/connection-manager';
 import type { TransportManager } from '@libp2p/interface-internal/transport-manager';
+
 export interface ConnectionManagerInit {
     /**
      * The maximum number of connections libp2p is willing to have before it starts
@@ -112,9 +113,7 @@ export interface DefaultConnectionManagerComponents {
     connectionGater: ConnectionGater;
     events: EventEmitter<Libp2pEvents>;
 }
-export interface OpenConnectionOptions extends AbortOptions {
-    priority?: number;
-}
+
 /**
  * Responsible for managing known connections.
  */
diff --git a/node_modules/libp2p/dist/src/connection-manager/index.js b/node_modules/libp2p/dist/src/connection-manager/index.js
index fa40713..8b57329 100644
--- a/node_modules/libp2p/dist/src/connection-manager/index.js
+++ b/node_modules/libp2p/dist/src/connection-manager/index.js
@@ -300,7 +300,7 @@ export class DefaultConnectionManager {
         }
         options.signal?.throwIfAborted();
         const { peerId } = getPeerAddress(peerIdOrMultiaddr);
-        if (peerId != null) {
+        if (peerId != null && options.force !== true) {
             log('dial %p', peerId);
             const existingConnections = this.getConnections(peerId);
             if (existingConnections.length > 0) {
